import time
import classifier
from classifier import flatten
from classifier import classification_error
import os, sys, re, getopt, shutil

def loadData(fullname):
    if(not os.path.exists(fullname)): return None
    f = open(fullname,'r')
    data=[[]] # data is list of lists of lists
    labels=[]
    i=0
    for line in f:
        nums = [int(s) for s in line.split()]
        if len(nums)==0 :
            i=i+1
            data.append([])
            continue
        elif len(nums)==1 : # 1 number is special case
            data[i].append(nums[0]);
        else :
            data[i].append(nums)
    f.close()
    return data

def loadPacmanData(fullnames,labels=[0,1]):
    if not isinstance(fullnames,list) : fullnames=[fullnames]
    label=[]
    data=[]
    for fni in range(0,len(fullnames)):
        if len(labels)<fni : labels.insert(fni,labels[-1]) # infer label if not given
        fullname = fullnames[fni]
        datafn = loadData(fullname + ".data");
        if datafn is None :
            print("Could not load data or lables from : " + fullname)
            continue
        for i in range(0,len(datafn)): # add this file to the global store of info
            data.append(datafn[i])
            label.append(labels[fni])
    return (data,label)

def runtest(trainfns,testfns,classifierfn):
    # load the train data
    traindata = loadPacmanData(trainfns)
    
    # train the classifier
    classifierDef = getattr(classifier,classifierfn) # load the classifier definition
    start_time = time.time()
    print('Training classifier...')
    myclassifier = classifierDef(classifier) # construct classifier object
    myclassifier.train(traindata[0],traindata[1]) # train the classifier
    trainpredictions = myclassifier.test(traindata[0])
    print('Training finished');
    trainperf  = classification_error(traindata[1],trainpredictions)
    traintime  = time.time() - start_time

    # load the testing data
    testdata = loadPacmanData(testfns);
    # test the classifier
    testpredictions = myclassifier.test(testdata[0])
    # compute test performance
    testperf = classification_error(testdata[1],testpredictions)
    # print the results
    print("Training data from file '{}' containing {} examples".format(",".join(trainfns),len(traindata[0])))
    print("Testing data from file '{}' containing {} examples".format(",".join(testfns),len(testdata[0])))
    print("Training time       : %f" % traintime)
    print("Training error rate : %f" % trainperf)
    print("Testing error rate  : %f" % testperf)


def help():
   return """Usage: ./{filename} [-h | --help --train=trainfns --test=testfns --classifier=classifernm ]

-h|--help\t\tDisplays this help text.
--train=[filename(s)]\t comma separated list of files to load the training data from
--test=[filename(s)]\tcomma separated list of files to load the testing data from
--classifier=[classname]\tgives the classifier class to evaluate

Examples:
./{filename}
Runs training data for class 0 from train0.data and for class 1 form train1.data to train the classifier named binaryclassifier.  This is then evaluated on test0.data,test1.data
./{filename} --train=train0,train1 --test=test0,test1 --classifier binaryclassifier
The same as above with explicit arguments

""".format(filename=__file__)

if __name__ == '__main__':
    """
    The main function called when classifiertest.py is run
    from the command line:

    > python classifertest.py

    See the usage string for more details.

    > python classifertest.py --help
    """

    # process the command line arguments
    trainfns='train0,train1'
    testfns='test0,test1'
    classifierfn='binaryclassifier'
    if len(sys.argv) == 1:
        sys.argv.extend([x for x in re.split(r' *',raw_input("Enter any command line arguments?")) if x!=''])

    opts, args = getopt.getopt(sys.argv[1:], 'hc:', ['help', 'train=', 'test=', 'classifer='])
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print('here')
            print(help())
            sys.exit()
        elif opt == '--train':
            trainfns = arg
            trainfns = trainfns.split(',')
        elif opt == '--test':
            testfns = arg
            testfns = testfns.split(',')
        elif opt == '--classifier':
            classifierfn = arg

    runtest(trainfns,testfns,classifierfn)
